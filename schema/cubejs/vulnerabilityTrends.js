cube(`vulnerabilityTrends`, {
    sql: `
        SELECT
            ${FILTER_PARAMS.vulnerabilityTrends.idx.filter((vulnerability_id) =>
            `COALESCE(main.idx,${vulnerability_id}) idx,`)}
            dd.days AS detection_time,
            COALESCE(COUNT(main.mac),0) asset_count
            FROM (
                SELECT
                    DISTINCT ON (f.cve_name, f.mac)
                    ${FILTER_PARAMS.vulnerabilityTrends.idx.filter((vulnerability_id) =>
                    `${vulnerability_id}::text AS idx,`)}
                    f.sensor_id,
                    f.cve_name,
                    f.mac,
                    f.end_time,
                    read_time::date AS read_time
                FROM fuzz f, asset a
                WHERE  f.sensor_id = a.sensor_id
                    ${FILTER_PARAMS.vulnerabilityTrends.idx.filter((vulnerability_id) =>
                    `AND f.cve_name = (SELECT v.code FROM vulnerability v WHERE v.idx = ${vulnerability_id})`)}
                    AND f.mac = a.mac
                    AND f.response is not null
                    AND f.response not like \'%Not%\'
                    AND f.response not like \'%Unknown%\'
                    AND f.response not like \'%method%\'
                    AND f.response not like \'%wifi%\'
            ) main
            RIGHT OUTER JOIN (
                ${FILTER_PARAMS.vulnerabilityTrends.detection_time.filter((from, to) =>
                    `select generate_series(${from}::date, ${to}::date, '1 day'::interval) as days`
                  )}
            ) dd
            ON dd.days = main.read_time
            GROUP BY main.idx, dd.days
            ORDER BY dd.days
    `,

    joins: {

    },

    measures: {
        asset_count: {
            type: `sum`,
            sql: `asset_count`
        }
    },

    dimensions: {
        detection_time: {
            sql: `detection_time`,
            type: `time`,
            primaryKey: true,
            shown: true
        },

        idx: {
            sql: `idx`,
            type: `number`
        },
    },
    refreshKey: {
        sql: `SELECT FLOOR(EXTRACT(EPOCH FROM NOW()) / 10)`
    }
});
