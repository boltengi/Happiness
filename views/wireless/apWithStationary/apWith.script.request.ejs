<script>
  const requestTree = () => {
    fetch('/wireless/apWithStationary/treelist')
    .then(function (response) {
      return response.text()
    })
    .then(function (data) {
      const $tree = $('#tree').html(data);
    });
  }

  const requestGraph = () => {
    return fetch(`/wireless/apWithStationary/graph`)
    .then(function(response){
      return response.text();
    })
    .then(function(data){
      const $graph = $('#graph').html(data);
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestWirelesstrends = (sensor_id, ap_mac) => {

    const loading = openLoading($('#wirelesstrends'));

    const condition = {
      sensor_id: sensor_id,
      ap_mac: ap_mac
    }

    return fetch(`/wireless/apWithStationary/wirelessTrends`,{
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      return {
        data: response.json(),
        loading: loading
      };
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestNetwork = (sensor_id, ap_mac) => {

    /**
      * @date 2021-07-16
      * @desc fix notworking - loading
      * @company
      */
    const loading = openLoading($('#wirelessnetwork'));
    /*************************************/

    const condition = {
      sensor_id: sensor_id,
      ap_mac: ap_mac
    }

    return fetch(`/wireless/apWithStationary/network`,{
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      /**
        * @date 2021-07-16
        * @desc fix notworking - loading
        * @company
        */
      return {
        data: response.json(),
        loading: loading
      };
      /*************************************/
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestContent = () => {
    const condition = {
    };

    return fetch(`/wireless/apWithStationary/content`,{
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      return response.text();
    })
    .then(function(data){
      const $listTable = $('#content').html(data);
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestAPList = () => {
    const sensor_id = getState().sensor_id;
    const condition = {
      sensor_id: sensor_id
    };

    return fetch(`/wireless/apWithStationary/apNameList`,{
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      return response.json();
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestList = (page = 1, entries = 10, sensor_id = null, ap_mac = null, time = null, filter = null) => {

    function validFromToTime(time){
      let valid = { isValid : true, from : true, to : true };

      if (!time) return valid;

      if(time.from !== '' && !moment(time.from)._isValid) valid.from = false;
      if(time.to !== '' && !moment(time.to)._isValid) valid.to = false;
      if(!valid.from || !valid.to) valid.isValid = null;

      // if(time.from === '' && time.to === '') {} // for admin regtime
      if(time.from !== '' && time.to !== '') {}
      else {
        valid.isValid = false;
        if (!time.from) valid.from = false;
        if (!time.to) valid.to = false;
      }

      if( new Date(time.from).getTime() > new Date(time.to).getTime() ){
        valid.from = false;
        valid.to = false;
        valid.isValid = null;
      }

      return valid;
    }
    function checkFromToTime(validTime){
      if(validTime.isValid === true) return true;
      if(!validTime.isValid){
        alertModalControl('open', 'alertError', '<%= __("wirelessAP|Check again") %>', {
          closeCallback: function(){
            $('#from-datepicker').focus();
          }
        });
        return validTime.isValid;
      }
    }
    function checkRangeTime(time){
      const isvalidFromToTime = validFromToTime(time);
      return checkFromToTime(isvalidFromToTime);
    }

    if(!checkRangeTime(time)) time = null;

    const loading = openLoading($('#assetMonitor'),{size:'large', template: $('#assetMonitor' + ' .search-area').length ? undefined: 'tableList'});

    const condition = {
      entries: entries,
      ap_mac: ap_mac,
      sensor_id: sensor_id
    };

    if(time) condition.time = time;
    if(filter) condition.filter = filter;

    return fetch(`/wireless/apWithStationary/StationaryList/${page}`,{
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      return {
        data: response.text(),
        loading: loading
      };
    })
    .then((data)=>{
      data.loading.setLoaded(true);
      return data.data
    })
    .then(function(data){
      const $assetMonitor = $('#assetMonitor .html-container').html(data);
      return {isLoading: true};
    })
    .then((data)=>{
      if(data.isLoading){
        const $loadingParent = $('#assetMonitor');
        removeLoading($loadingParent);
      }
    })
    .catch(function(error){console.error('Error:', error)});
  }
</script>
