<script>
  const requestSummary = () => {
    fetch('/event/asset/summary')
    .then(function (response) {
      return response.text()
    })
    .then(function (data) {
      const $summary = $('#summary').html(data);
    });
  }

  const requestStatus = function(type){

    const loading = openLoading($(`#${type}-graph`));

    return fetch(`/event/asset/status/${type}`)
    .then(function(response){
      return {
        data: response.json(),
        loading: loading
      };
    })
  }

  const requestList = (page, entries, time, filter) => {

    function validFromToTime(time){
      let valid = { isValid : true, from : true, to : true };

      if (!time) return valid;

      if(time.from !== '' && !moment(time.from)._isValid) valid.from = false;
      if(time.to !== '' && !moment(time.to)._isValid) valid.to = false;
      if(!valid.from || !valid.to) valid.isValid = null;

      // if(time.from === '' && time.to === '') {} // for admin regtime
      if(time.from !== '' && time.to !== '') {}
      else {
        valid.isValid = false;
        if (!time.from) valid.from = false;
        if (!time.to) valid.to = false;
      }

      if( new Date(time.from).getTime() > new Date(time.to).getTime() ){
        valid.from = false;
        valid.to = false;
        valid.isValid = null;
      }

      return valid;
    }
    function checkFromToTime(validTime){
      if(validTime.isValid === true) return true;
      if(!validTime.isValid){
        alertModalControl('open', 'alertError', '<%= __("eventAsset|Check again") %>', {
          closeCallback: function(){
            $('#from-datepicker').focus();
          }
        });
        return validTime.isValid;
      }
    }
    function checkRangeTime(time){
      const isvalidFromToTime = validFromToTime(time);
      return checkFromToTime(isvalidFromToTime);
    }

    if(!checkRangeTime(time)) time = null;

    const loading = openLoading($(`#listTable`), {size:'large', template: $('#listTable' + ' .search-area').length ? undefined: 'cardTableList', title: '<%= __("asset|New event list") %>'});

    // // table
    const condition = {
      entries: entries
    };

    if(time) condition.time = time;
    if(filter) condition.filter = filter;

    return fetch(`/event/asset/${page}`, {
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function (response) {
      return {
        data: response.text(),
        loading: loading
      };
    })
    .then((data)=>{
      data.loading.setLoaded(true);
      return data.data
    })
    .then(function(data){
      const $listTable = $('#listTable .html-container').html(data);
      return {isLoading: true}
    })
    .then(function (data) {
      if(data.isLoading){
        const $loadingParent = $('#listTable');
        removeLoading($loadingParent);
      }
    })
    .catch(function(error){console.error('Error:', error)});
  }

  const requestDetail = (asset_event_id, obj) => {
    return fetch(`/event/asset/assetdetail/${asset_event_id}`)
    .then(function(response){
      return response.text();
    })
    .then(function(data){
      obj.btnEle.closest('tr').next('.accordion-content').find('.accordion-content-box').html(data);
    })
    .catch(function(errors){console.error('Error:', errors)});
  }

  const requestProcessingPopup = (dataValue) => {
    fetch(`/event/asset/assetprocessing`, {
      method: 'POST',
      body: JSON.stringify(dataValue),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function(response){
      return response.text();
    })
    .then(function(data){
      $('#modal-processing').html(data);
    })
    .catch(function(errors){console.error('Error:', errors)});
  }

  const requestProcessingDetail = (processing, obj) => {
    return fetch(`/event/asset/assetprocessingdetail/${processing}`)
    .then(function(response){
      return response.text();
    })
    .then(function(data){
      obj.btnEle.closest('tr').next('.accordion-content').find('.accordion-content-box').html(data);
    })
    .catch(function(errors){console.error('Error:', errors)});
  }

  const requestProcessing = (dataValue, validationInstance, $loadingParent) => {

    validationInstance.checkValidation();
		if(!validationInstance.isValidation) return alertModalControl('open', 'alertError', '<%= __("eventAsset|Check again") %>', {
      closeCallback: function(){
        const $unValidNode = validationInstance.getUnValidItems();
        if($unValidNode) $unValidNode[0].$item.find(":first-child").focus();
      }
    });

    const loading = openLoading($loadingParent);

    fetch(`/event/asset/processing`, {
      method: 'PUT',
      body: JSON.stringify(dataValue),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function (response) {
      return {
        data: response,
        loading: loading
      };
    })
    .then((data)=>{
      data.loading.setLoaded(true);
      return {
        data: data.data,
        isLoading: true
      }
    })
    .then((data)=>{
      if(data.isLoading){
        removeLoading($loadingParent);
      }
      return {data:data.data}
    })
    .then(function(data){
      if(data.data.status == 200){ refreshPage(); }
      if(data.data.status == 500){ alertModalControl('open', 'alertError', '<%= __("eventAsset|Error!") %>'); }
    })
    .catch(function(errors){console.error('Error:', errors)});
  }

</script>
