<script>
  const requestList = (page, entries, time = {}, filter = null) => {

    function validFromToTimeReg(time){
      let valid = { isValid : true, from : true, to : true };

      if (!time) return valid;

      if(time.from !== '' && !moment(time.from)._isValid) valid.from = false;
      if(time.to !== '' && !moment(time.to)._isValid) valid.to = false;
      if(!valid.from || !valid.to) valid.isValid = null;

      if(time.from === '' && time.to === '') {} // for admin regtime
      else if(time.from !== '' && time.to !== '') {}
      else {
        valid.isValid = false;
        if (!time.from) valid.from = false;
        if (!time.to) valid.to = false;
      }

      if( new Date(time.from).getTime() > new Date(time.to).getTime() ){
        valid.from = false;
        valid.to = false;
        valid.isValid = null;
      }

      return valid;
    }
    function checkFromToTimeReg(validTime){
      if(validTime.isValid === true) return true;
      if(!validTime.isValid){
        alertModalControl('open', 'alertError', '<%= __("administrationAsset|Check again") %>', {
          closeCallback: function(){
            $('#from-datepicker').focus();
          }
        });
        return validTime.isValid;
      }
    }
    function checkRangeTimeReg(time){
      const isvalidFromToTime = validFromToTimeReg(time);
      const checkTime = checkFromToTimeReg(isvalidFromToTime);
      return checkTime
    }
    if(!checkRangeTimeReg(time)) time = null;

    const loading = openLoading($(`#listTable`), {size:'large', template: $('#listTable' + ' .search-area').length ? undefined: 'cardTableList', title: '<%= __("administrationAsset|Asset") %>', filter: false});

    // // table
    const condition = {
      entries: entries,
    };

    if (time) condition.time = time;
    if (filter) condition.filter = filter;

    return fetch(`/admin/audit/${page}`, {
      method: 'POST',
      body: JSON.stringify(condition),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(function (response) {
      return {
        data: response.text(),
        loading: loading
      };
    })
    .then((data)=>{
      data.loading.setLoaded(true);
      return data.data
    })
    .then(function(data){
      const $listTable = $('#listTable .html-container').html(data);
      return {isLoading: true}
    })
    .then(function (data) {
      if(data.isLoading){
        const $loadingParent = $('#listTable');
        removeLoading($loadingParent);
      }
    })
    .catch(function(error){console.error('Error:', error)});
  }
</script>
