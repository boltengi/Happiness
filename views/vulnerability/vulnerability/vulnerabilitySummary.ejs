<!-- deck-wrap -->
<div class="deck-wrap">
  <div class="deck-graph-devide-wrap">
    <div class="deck-graph-devide" data-vulnerabilitytype>
      <!-- deck -->
      <article class="deck loading-parent" id="vulnerabilitytype-graph">
        <div class="deck-header">
          <h1 class="deck-title"><%= __("vulnerability|Total vulnerability codes") %></h1>
          <div class="deck-header-right">
            <span class="deck-term-text">(<%= __("vulnerability|Full period") %>)</span>
            <span class="deck-total-text" data-total><span class="num">0</span></span>
          </div>
        </div>
        <div class="deck-body">
          <div class="chart-box title-style">
            <div class="chart">
              <div id="myDoughnutHighChart"></div>
            </div>
            <div class="chart-legend-list">
              <div class="chart-legend-list-title"><%= __("vulnerability|Vulnerability codes Top5") %></div>
              <ul>
              </ul>
            </div>
          </div>
        </div>
      </article>
      <!-- //deck -->
    </div>
    <div class="deck-graph-devide" data-riskiest>
      <!-- deck -->
      <article class="deck loading-parent" id="riskiest-graph">
        <div class="deck-header">
          <h1 class="deck-title"><%= __("vulnerability|Total risk types") %></h1>
          <div class="deck-header-right">
            <span class="deck-term-text">(<%= __("vulnerability|Full period") %>)</span>
            <span class="deck-total-text" data-total><span class="num">0</span></span>
          </div>
        </div>
        <div class="deck-body">
          <div class="chart-box title-style">
            <div class="chart">
              <div id="myPieHighChart"></div>
            </div>
            <div class="chart-legend-list">
              <div class="chart-legend-list-title"><%= __("vulnerability|Riskiest types Top5") %></div>
              <ul>
              </ul>
            </div>
          </div>
        </div>
      </article>
      <!-- //deck -->
    </div>
    <div class="deck-bar-devide" data-vulnerabilitycount>
      <!-- deck -->
      <article class="deck loading-parent" id="vulnerabilitycount-graph">
        <div class="deck-header">
          <h1 class="deck-title"><%= __("vulnerability|Vulnerability count") %></h1>
          <div class="deck-header-right">
            <span class="deck-term-text">(<%= __("vulnerability|Week") %>)</span>
          </div>
        </div>
        <div class="deck-body">
          <div id="myLineChart"></div>
        </div>
      </article>
      <!-- //deck -->
    </div>
  </div>
</div>
<!-- //deck-wrap -->
<style>
  #myDoughnutHighChart {
    width: 200px;
    height: 200px;
  }
  #myPieHighChart {
    width: 200px;
    height: 200px;
  }
  #myLineChart {
    height: 210px;
  }
</style>

<% if(typeof rendering == 'undefined') { %>
<!--
* @date 2021-05-14
* @desc front performance improvement by lighthouse
* @company
* -->
<script src="/js/ui-lib.highcharts.min.js"></script>
<!-- // @date 2021-05-14 -->
<script>
  var setStatusVulnerabilitytype = function(data, maxLegend = 5){

    logdata('/vulnerability/vulnerability/status/vulnerabilitytype', data);

    const ObjView = data.ObjView;

    const $vulnerabilitytype = $('[data-vulnerabilitytype]');
    const $chartLegendList = $vulnerabilitytype.find('.chart-legend-list ul');
    let total = 0;

    $.each(ObjView, function(index, element){
      const count = Number(element.count);
      total += count;
    });

    $vulnerabilitytype.find('[data-total]').find('.num').html(format.numComma(total));
    $.each(ObjView, function(index, element){

      if (index >= maxLegend) return;

      let style = ''
      switch(index){
        case 0 : style = 'alpha'; break;
        case 1 : style = 'beta'; break;
        case 2 : style = 'gamma'; break;
        case 3 : style = 'delta'; break;
        case 4 : style = 'epsilon'; break;
        default : style = 'alpha'; break;
      }

      const htmlli = `<li>
        <div class="chart-legend">
          <span class="legend-title">
            <span class="icon-graph-legend legend-${style}"></span>
            ${element.status}
          </span>
          <div class="legend-values">
            <span class="legend-value"><span class="num">${format.numComma(element.count)}</span>
          </div>
        </div>
      </li>`
      $chartLegendList.append(htmlli);
    });

    const graphData = $.map(ObjView,function(element, index){
      if (index >= maxLegend) return;
      return { name: element.status, y: Number(element.count) };
    });

    // Create the chart
		Highcharts.chart('myDoughnutHighChart', {
      credits: {
        enabled: false
      },
	    chart: {
				type: 'pie',
				margin: [0, 0, 0, 0],
				spacingTop: 0,
				spacingBottom: 0,
				spacingLeft: 0,
				spacingRight: 0
	    },
			title: {
				text: undefined
			},
	    plotOptions: {
        pie: {
					allowPointSelect: true,
      		cursor: 'pointer',
          shadow: false,
          center: ['50%', '50%'],
					colors: [GRAPH_COLOR.PRIMARY,GRAPH_COLOR.POINT,GRAPH_COLOR.SECONDARY,GRAPH_COLOR.DELTA,GRAPH_COLOR.EPSILON],
        }
	    },
      tooltip: {
        backgroundColor: 'rgba(177, 177 ,176, .7)',
        borderColor: 'transparent',
        shadow: false,
        style: { fontSize: '10px', color: '#fff'},
        headerFormat: '',
        pointFormat: '<span>- {point.name} : {point.y}</span>',
        padding: 4
      },
	    series: [{
        data: graphData,
        size: '170px',
				innerSize: '50%',
				states: {
					hover: false
				},
				borderWidth: 0,
        dataLabels: {
          formatter: function () {
            return this.y > 5 ? this.point.name : null;
          },
          color: '#ffffff',
          distance: -30,
					borderWidth: null
        }
	    }]
		});

    return { isLoading: true };
  }
  var setStatusRiskiest = function(data, maxLegend = 5){

    logdata('/vulnerability/vulnerability/status/riskiest', data);

    const ObjView = data.ObjView;

    const $riskiest = $('[data-riskiest]');
    const $chartLegendList = $riskiest.find('.chart-legend-list ul');
    let total = 0;

    $.each(ObjView, function(index, element){
      const count = Number(element.count);
      total += count;
    });

    $riskiest.find('[data-total]').find('.num').html(format.numComma(total));
    $.each(ObjView, function(index, element){

      if (index >= maxLegend) return;

      let style = ''
      switch(index){
        case 0 : style = 'alpha'; break;
        case 1 : style = 'beta'; break;
        case 2 : style = 'gamma'; break;
        case 3 : style = 'delta'; break;
        case 4 : style = 'epsilon'; break;
        default : style = 'alpha'; break;
      }

      const htmlli = `<li>
        <div class="chart-legend">
          <span class="legend-title">
            <span class="icon-graph-legend legend-${style}"></span>
            ${element.status}
          </span>
          <div class="legend-values">
            <span class="legend-value"><span class="num">${format.numComma(element.count)}</span>
          </div>
        </div>
      </li>`
      $chartLegendList.append(htmlli);
    });

    const graphData = $.map(ObjView, function(element, index){
      if (index >= maxLegend) return;
      return { name: element.status, y: Number(element.count) };
    });

    Highcharts.chart('myPieHighChart', {
      credits: {
        enabled: false
      },
	    chart: {
				type: 'pie',
				margin: [0, 0, 0, 0],
				spacingTop: 0,
				spacingBottom: 0,
				spacingLeft: 0,
				spacingRight: 0
	    },
			title: {
				text: undefined
			},
	    plotOptions: {
        pie: {
					allowPointSelect: true,
      		cursor: 'pointer',
          shadow: false,
          center: ['50%', '50%'],
					colors: [GRAPH_COLOR.PRIMARY,GRAPH_COLOR.POINT,GRAPH_COLOR.SECONDARY,GRAPH_COLOR.DELTA,GRAPH_COLOR.EPSILON],
        }
	    },
      tooltip: {
        backgroundColor: 'rgba(177, 177 ,176, .7)',
        borderColor: 'transparent',
        shadow: false,
        style: { fontSize: '10px', color: '#fff'},
        headerFormat: '',
        pointFormat: '<span>- {point.name} : {point.y}</span>',
        padding: 4
      },
	    series: [{
        data: graphData,
        size: '170px',
				states: {
					hover: false
				},
				borderWidth: 0,
        dataLabels: {
          formatter: function () {
            return this.y > 5 ? this.point.name : null;
          },
          color: '#ffffff',
          distance: -30,
					borderWidth: null
        }
	    }]
		});
    return { isLoading: true };
  }
  var setStatusVulnerabilitycount = function(data){

    logdata('/vulnerability/vulnerability/status/vulnerabilitycount', data);

    const ObjView = data.ObjView[0].vulnSeverity;
    const $vulnerabilitycount = $('[data-vulnerabilitycount]');

    // Vulnerability Count
    // 날짜를 저장하는 배열, 중복날짜 제거해서 저장하는 배열, 날짜별 인덱스가지는 객체
    let categories_array_all = [];
    let categories_array = [];
    let indexDictionary = {};

    ObjView.forEach((data) => {
      let date = data.date;
      categories_array_all.push(date)
      if(categories_array.indexOf(date) != -1){
        return ;
      }
      categories_array.push(date)
    })

    // let categories = categories_array;
    let categories = categories_array.map((date)=>{
      return date.slice(-5);
    });

    // make dictionary
    categories_array.map((data, i) => {
      indexDictionary[data] = i
    })

    let graphData_Critical = [];
    let graphData_High = [];
    let graphData_Medium = [];
    let graphData_Low = [];

    for(let i=0; i<categories_array.length; i++){
      graphData_Critical.push(0);
      graphData_High.push(0);
      graphData_Medium.push(0);
      graphData_Low.push(0);
    }

    let vulnSeverityIndex = 0;

    ObjView.map((data, index) => {

      if(data.count > 0){
        switch (data.severity) {
          case 0:
            vulnSeverityIndex = indexDictionary[data.date]
            graphData_Low[vulnSeverityIndex] = data.count;
            break;
          case 1:
            vulnSeverityIndex = indexDictionary[data.date]
            graphData_Medium[vulnSeverityIndex] = data.count;
            break;
          case 2:
            vulnSeverityIndex = indexDictionary[data.date]
            graphData_High[vulnSeverityIndex] = data.count;
            break;
          case 3:
            vulnSeverityIndex = indexDictionary[data.date]
            graphData_Critical[vulnSeverityIndex] = data.count;
            break;
        }
      }

    })

    const myLineChart = Highcharts.chart('myLineChart', {
        credits: false,

        tooltip: {
          backgroundColor: 'rgba(177, 177 ,176, .7)',
          borderColor: 'transparent',
          shadow: false,
          style: { fontSize: '10px', color: '#fff'},
          headerFormat: '',
          // pointFormat: '<span>{point.y}</span>',
          formatter: function () {
            // return Math.abs(this.point.y);
            return `
             ${this.x} : ${this.point.y}
            `;
          },
          padding: 4
        },

        chart: {
          marginTop: 10,
          marginBottom: 20,
          marginLeft: 20,
          marginRight: 20,
        },

        title: {
            text: null
        },

        yAxis: {
          offset: -10,
          lineWidth: 0,
          // min: 0,
          // max: 100,
          // minorTickInterval: 25,
          title: {
              text: null
          },
          labels: {
            style:{
              color:'#B1B1B0',
              fontFamily:FontFamily.FontFamilyContent,
              fontSize:'10px'
            },
          },
        },

        xAxis: {
          categories: categories,
          labels: {
            x: 6,
            style:{
              color:'#B1B1B0',
              fontFamily:FontFamily.FontFamilyContent,
              fontSize:'10px'
            },
          },
          tickPosition: 'inside',
          tickColor: '#DEDEDE',
          tickWidth: 1,
          tickLength: 5,
          tickmarkPlacement: 'on',
          tickPositions: [0,1,2,3,4,5,6,7],
        },

        legend: {
            enabled: false,
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle'
        },

        plotOptions: {
            series: {
                pointPlacement: 'on',
                lineWidth: 2,
                label: {
                    connectorAllowed: false
                },
                marker:{
                  enabled: false ,
                  symbol: 'circle',
                  fillColor: '#FFFFFF',
                  lineWidth: 1,
                  lineColor: null, // inherit from series
                  radius: 3,
                },
                // pointStart: 1,
            }
        },

        colors: [
          GRAPH_COLOR.LOW,
          GRAPH_COLOR.MEDIUM,
          GRAPH_COLOR.HIGH,
          GRAPH_COLOR.CRITICAL
          ],

        series: [{
            name: 'Low',
            data:  graphData_Low
        }, {
            name: 'Medium',
           data: graphData_Medium
        }, {
            name: 'High',
           data: graphData_High
        }, {
            name: 'Critical',
           data: graphData_Critical
        }],
    });

    // 임시로 이벤트 걸기 for minorTickInterval
    // the button action
    setTimeout(() => {
      // chart.yAxis[0].options.minorTickInterval = 1;
      const max = Math.ceil(myLineChart.yAxis[0].max);

      myLineChart.yAxis[0].update({
        max: max
      });

      setTimeout(() => {
        let value = Math.abs(myLineChart.yAxis[0].max) / 4;
        myLineChart.yAxis[0].update({
          minorTickInterval: value,
        });

      }, 0)

    }, 0);

    return { isLoading: true };
  }
</script>
<script>
  var vulnerabilitytypeData = requestStatus('vulnerabilitytype');
  vulnerabilitytypeData
  .then((data)=>{
    data.loading.setLoaded(true);
    return data.data
  })
  .then(setStatusVulnerabilitytype)
  .then((data)=>{
    if(data.isLoading){
      const $loadingParent = $(`#vulnerabilitytype-graph`);
      removeLoading($loadingParent);
    }
  });

  var riskiestData = requestStatus('riskiest');
  riskiestData
  .then((data)=>{
    data.loading.setLoaded(true);
    return data.data
  })
  .then(setStatusRiskiest)
  .then((data)=>{
    if(data.isLoading){
      const $loadingParent = $(`#riskiest-graph`);
      removeLoading($loadingParent);
    }
  });

  var vulnerabilitycountData = requestStatus('vulnerabilitycount');
  vulnerabilitycountData
  .then((data)=>{
    data.loading.setLoaded(true);
    return data.data
  })
  .then(setStatusVulnerabilitycount)
  .then((data)=>{
    if(data.isLoading){
      const $loadingParent = $(`#vulnerabilitycount-graph`);
      removeLoading($loadingParent);
    }
  });
</script>
<% } %>
